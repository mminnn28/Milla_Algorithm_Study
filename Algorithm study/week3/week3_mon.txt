import java.util.*;
import java.lang.*;
import java.io.*;


public class Main {
    static boolean[] visited;
    static boolean[][] graph;
    static int N, M;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        int v = Integer.parseInt(st.nextToken());

        visited = new boolean[N];
        graph = new boolean[N][N];

        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int j = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());
            graph[j-1][k-1] = true;
            graph[k-1][j-1] = true; // 양방향
        }

        dfs(v-1);
        
        System.out.println("");

        bfs(v-1);
        
        
    }
    
    static void dfs (int n) {
       visited[n] = true;
       System.out.printf("%d ", n + 1);
        
        for (int i = 0; i < N; i++) 
            if (graph[n][i] == true && visited[i] == false)       
                dfs(i);
            
        return;
    }

    static void bfs (int n) {
        clear(); // 방문 초기화, 재귀가 아니기 때문에 안에서 clear 가능
        visited[n] = true;
        System.out.printf("%d ", n + 1);
        
        Queue<Integer> q = new LinkedList<>();
        q.offer(n);

        while (!q.isEmpty()) {
            int v = q.poll();
            for (int i = 0; i < N; i++) {
                if (graph[v][i] == true && visited[i] == false) {
                    visited[i] = true;
                    q.offer(i);
                    System.out.printf("%d ", i + 1);
                }
            }
        }

        return;
    }

    static void clear() {
        for (int i = 0; i < N; i++)
            visited[i] = false;
    }
}